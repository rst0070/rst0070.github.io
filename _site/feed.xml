<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-01-15T16:26:33+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Rst</title><subtitle>Studying Computer Science at University Of Seoul</subtitle><author><name>Wonbin Kim</name></author><entry><title type="html">[Git] 2.Checkout</title><link href="http://localhost:4000/git/git-2-checkout.html" rel="alternate" type="text/html" title="[Git] 2.Checkout" /><published>2020-01-14T00:00:00+09:00</published><updated>2020-01-14T00:00:00+09:00</updated><id>http://localhost:4000/git/git-2-checkout</id><content type="html" xml:base="http://localhost:4000/git/git-2-checkout.html"></content><author><name>Wonbin Kim</name></author><category term="git" /><summary type="html"></summary></entry><entry><title type="html">[Git] 1.버전생성</title><link href="http://localhost:4000/git/git-1-create-version.html" rel="alternate" type="text/html" title="[Git] 1.버전생성" /><published>2020-01-14T00:00:00+09:00</published><updated>2020-01-14T00:00:00+09:00</updated><id>http://localhost:4000/git/git-%201-create-version</id><content type="html" xml:base="http://localhost:4000/git/git-1-create-version.html">&lt;h2 id=&quot;버전관리&quot;&gt;버전관리&lt;/h2&gt;
&lt;p&gt;git은 버전관리를 제공하는 소프트웨어이며 ‘.git’폴더에서 변경사항을 관리한다.&lt;br /&gt;
아래의 용어들을 통해 git이 작동하는 방식을 알 수 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;repository: 버전이 저장되어있는곳(.git 폴더로 생각할 수 있다.)&lt;/li&gt;
  &lt;li&gt;working tree: 변경사항들이 버전으로 전환되기 전 단계&lt;/li&gt;
  &lt;li&gt;staging area: working tree에서 버전으로 저장할 파일들을 선택하여 올려놓는 공간.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;버전관리-시작&quot;&gt;버전관리 시작&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git init .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;여기서 .은 현재 디렉토리를 가리킨다.
이 명령을 수행하면 해당 디렉토리에 ‘.git’이라는 폴더가 생성된다.
이 폴더안의 데이터를 이용해 git이 버전관리를 한다.&lt;/p&gt;

&lt;h2 id=&quot;버전-생성&quot;&gt;버전 생성&lt;/h2&gt;

&lt;p&gt;git은 버전관리를 했던 파일에 대해 추적을 한다.&lt;br /&gt;
즉 버전관리를 하지 않은 파일은 추적하지 않는다.&lt;br /&gt;
대상 파일을 staging area로 올리면 버전관리의 대상이 된다.&lt;br /&gt;
staging area로 올리기 위해선 &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; 명령을 이용하면 된다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 commit 명령을 하면 버전이 생성된다.
곧 repository에 저장되는것이다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit -m &quot;this is message&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;확인하기위해선 &lt;code class=&quot;highlighter-rouge&quot;&gt;log&lt;/code&gt;명령을 하면 된다. &lt;a href=&quot;https://git-scm.com/docs/git-log&quot;&gt;git 문서 참조&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 git이 추적하는 파일을 수정하면 어떻게 될까?
파일 수정후 status 명령을 하면&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git status
On branch master
Changes not staged for commit:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed)
  (use &quot;git restore &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)
        modified:   file.txt

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;‘changes not staged for commit’ 메세지를 보면 수정된 file.txt파일이 staging area에 올라가 있지 않다는 것을 알 수 있다.&lt;br /&gt;
즉 working tree에 변경사항이 있다는 것이며 &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; 명령으로 staging area에 추가하여 commit의 대상으로 지정할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이후 commit 명령을 하면 변경사항이 repository에 저장되며
git log 명령을 통해 확인할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;편의를-위한-명령어들&quot;&gt;편의를 위한 명령어들&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add .
#현재폴더의 모든 파일을 staging area에 올린다.

git commit -am &quot;this is message&quot;
#-am은 add와 message기능을 사용한다는 의미
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Wonbin Kim</name></author><category term="git" /><summary type="html">버전관리 git은 버전관리를 제공하는 소프트웨어이며 ‘.git’폴더에서 변경사항을 관리한다. 아래의 용어들을 통해 git이 작동하는 방식을 알 수 있다. repository: 버전이 저장되어있는곳(.git 폴더로 생각할 수 있다.) working tree: 변경사항들이 버전으로 전환되기 전 단계 staging area: working tree에서 버전으로 저장할 파일들을 선택하여 올려놓는 공간.</summary></entry></feed>