<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
	<channel>
		<title>Rst</title>
		<description></description>
		<link></link>
		<atom:link href="/rss-feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>[Jekyll, Github Page] 카테고리 페이지 만들기</title>
				
				
					<description>&lt;p&gt;Github 블로그 포스팅을 정리하던중 카테고리 페이지의 필요성을 느꼈다.&lt;br /&gt;
&lt;a href=&quot;https://jekyllrb.com/docs/variables/&quot;&gt;Jekyll Docs&lt;/a&gt;에 설명되어있는 변수들을 잘 이용하면 카테고리 페이지를 만들수 있다!&lt;br /&gt;
아래의 순서로 만들어보았다.&lt;/p&gt;
</description>
				
				<pubDate>Fri, 08 Apr 2022 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/jekyll/making-category-page.html</link>
				<guid isPermaLink="true">http://localhost:4000/jekyll/making-category-page.html</guid>
			</item>
		
			<item>
				<title>[백준 2842번 집배원 한상덕] JAVA 풀이</title>
				
				
					<description>&lt;h2 id=&quot;문제의-요구사항&quot;&gt;문제의 요구사항&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2842&quot;&gt;문제 링크&lt;/a&gt;&lt;br /&gt;
P에서 출발해서 모든 K를 방문하고 P로 돌아오는 방법중 가장 적은 피로도로 움직이는 방법을 구하는 문제이다.&lt;br /&gt;
이때 주의할점이 있다.
    &lt;ol&gt;
      &lt;li&gt;모든 K를 방문하는것만 구현하면 된다. 같은 길로 돌아가면 되기 때문&lt;/li&gt;
      &lt;li&gt;부분 문제의 최적이 전체문제의 최적이 아니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;주의할 점 2번을 깨닫는게 좀 어려웠던것 같다.&lt;br /&gt;
한상덕의 피로도는 전체 경로중에 가장 높은 고도와 가장 낮은 고도의 차이이며 이를 최소화하는것이 이 문제의 목표이다.&lt;/p&gt;

&lt;p&gt;즉, DFS로 한상덕의 마을을 탐색한다고 했을때, 부분적인 경로에서 피로도를 최소화하는것으로는 문제해결이 불가능하다는 것 이다.&lt;/p&gt;

&lt;p&gt;따라서 전체 경로에 대한 가장 낮은고도와 가장 높은 고도를 설정해 놓고, 
이 고도사이에서 모든 집을 방문할 수 있는가를 확인하는것이 풀이방법이 될 것 이다.&lt;/p&gt;

&lt;h2 id=&quot;대략적인-방법&quot;&gt;대략적인 방법&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. 전체 경로의 고도 특정하기&lt;/strong&gt;&lt;br /&gt;
입력을 통해 마을의 모든 부분의 고도를 확인할 수 있는데 이를 중복을 제거하고 오름차순으로 정렬한다.&lt;br /&gt;
이 정렬된 고도값들에 두개의 포인터(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;left&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;right&lt;/code&gt; 등)를 사용하여 고도값을 조정한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;고도값개수&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//left와 right이용해 최대, 최소 고도를 우체국에서 출발하는 dfs에 전달하기&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dfs결과방문한집개수&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;전체집개수&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;altitute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;altitute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2. DFS 구현하기&lt;/strong&gt;&lt;br /&gt;
DFS메서드의 인자는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;최대고도&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;최소고도&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;현재위치&lt;/code&gt;를 가지도록 했고, 
리턴값은 해당 부분경로에서 방문한 집의 개수로 했다.
```java
int dfs(int low, int high, int h, int w){
    //1. 기저조건(이미 방문했거나 지도의 범위를 벗어난경우 0리턴)&lt;/p&gt;
</description>
				
				<pubDate>Sun, 13 Mar 2022 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/algorithm/boj/2842.html</link>
				<guid isPermaLink="true">http://localhost:4000/algorithm/boj/2842.html</guid>
			</item>
		
			<item>
				<title>[백준 1725번 히스토그램] JAVA 풀이</title>
				
				
					<description>&lt;h2 id=&quot;문제-요구사항&quot;&gt;문제 요구사항&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/1725&quot;&gt;문제 링크&lt;/a&gt; 
&lt;img src=&quot;/assets/img/BOJ/1725histogram.png&quot; alt=&quot;문제&quot; /&gt; 
히스토그램에서 밑변과 평행한 가장 큰 직사각형을 그리는것이 문제다.&lt;br /&gt;
이때 직사각형의 높이는 히스토그램의 높이보다 높을 수 없으므로 직사각형이 걸쳐있는 여러개의 막대중 가장 작은 막대의 높이와 같을 것 이다.&lt;/p&gt;

&lt;p&gt;직사각형이 어떤 형태를 가져야하는지 알았으니 어떻게 가장 큰 직사각형을 판단할지 정해야한다.&lt;/p&gt;
</description>
				
				<pubDate>Fri, 11 Mar 2022 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/algorithm/boj/1725.html</link>
				<guid isPermaLink="true">http://localhost:4000/algorithm/boj/1725.html</guid>
			</item>
		
			<item>
				<title>[Java] Enum, 열거형이란? 실체를 구현해보자</title>
				
				
					<description>&lt;h3 id=&quot;목차&quot;&gt;목차&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Enum의 의미&lt;/li&gt;
  &lt;li&gt;Enum 선언 및 사용 방법&lt;/li&gt;
  &lt;li&gt;Enum의 실체&lt;/li&gt;
  &lt;li&gt;Enum 구현해보기&lt;/li&gt;
&lt;/ol&gt;
</description>
				
				<pubDate>Sun, 03 Oct 2021 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/java/java-enums.html</link>
				<guid isPermaLink="true">http://localhost:4000/java/java-enums.html</guid>
			</item>
		
			<item>
				<title>[Java] Iterator 사용법, 구현</title>
				
				
					<description>&lt;ol&gt;
  &lt;li&gt;Iterator의 의미&lt;/li&gt;
  &lt;li&gt;Iterator 사용법&lt;/li&gt;
  &lt;li&gt;Iterator 만들어보기&lt;/li&gt;
&lt;/ol&gt;
</description>
				
				<pubDate>Sun, 03 Oct 2021 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/java/java-Iterator.html</link>
				<guid isPermaLink="true">http://localhost:4000/java/java-Iterator.html</guid>
			</item>
		
			<item>
				<title>컨테이너 배포란? : 애플리케이션 배포의 역사</title>
				
				
					<description>&lt;p&gt;컨테이너 형태의 배포는 애플리케이션 배포 패러다임중 하나이다. 이를 이해하기위해 역사를 살펴보자.&lt;/p&gt;
</description>
				
				<pubDate>Sat, 03 Apr 2021 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/etc/what-is-container-deployment.html</link>
				<guid isPermaLink="true">http://localhost:4000/etc/what-is-container-deployment.html</guid>
			</item>
		
			<item>
				<title>[Javascript] Hoisting과 변수의 유효범위 이해하기: 자바스크립트가 변수를 해석하는 방법</title>
				
				
					<description>&lt;p&gt;이 글에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hoisting&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;변수의 유효범위&lt;/code&gt;를 이해함으로써 자바스크립트가 어떻게 변수를 찾는지 알아볼 것이다.&lt;/p&gt;
</description>
				
				<pubDate>Fri, 26 Mar 2021 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/javascript/hoisting-and-scope.html</link>
				<guid isPermaLink="true">http://localhost:4000/javascript/hoisting-and-scope.html</guid>
			</item>
		
			<item>
				<title>[Node.js] http request 보내기</title>
				
				
					<description>&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;
&lt;p&gt;node.js 에 기본 탑재되어있는 http 모듈을 이용해 http.ClientRequest 객체를 생성하고 데이터를 붙여 전송하는 방법을 다룹니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#stepA&quot;&gt;request 생성하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stepB&quot;&gt;데이터 및 request 전송&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#stepC&quot;&gt;response 처리&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://nodejs.org/dist/latest-v14.x/docs/api/http.html&quot;&gt;node.js 문서&lt;/a&gt;를 참고하며 작성했습니다.&lt;/p&gt;
</description>
				
				<pubDate>Fri, 26 Feb 2021 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/javascript/http-request.html</link>
				<guid isPermaLink="true">http://localhost:4000/javascript/http-request.html</guid>
			</item>
		
			<item>
				<title>css 가상요소: after , before 요소 위치지정하기</title>
				
				
					<description>&lt;p&gt;가상선택자 after, before 엘리먼트가 사라지는 현상을 해결하고 그 방법을 작성한 글이다. after, before 엘리먼트의 위치지정 방법을 정리했다.&lt;/p&gt;

&lt;p&gt;결론 부터 말하자면 아래와 같다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;위치를 지정하기 위해서는 대상 엘리먼트, after, before 모두의 스타일이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;position: absolute&lt;/code&gt;여야 한다.&lt;/li&gt;
  &lt;li&gt;after, before 가상요소는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;content&lt;/code&gt;속성이 지정되어야한다.&lt;/li&gt;
  &lt;li&gt;after, before는 그 기준인 엘리먼트를 기준으로 위치가 지정된다.&lt;/li&gt;
  &lt;li&gt;위치 지정시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;top&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;left&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transform: translate()&lt;/code&gt;는 같은 효과를 가진다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이제 하나씩 설명하겠다.&lt;/p&gt;
&lt;h1 id=&quot;1-대상-엘리먼트와-after-before-엘리먼트는-position-absolute여야-한다&quot;&gt;1. 대상 엘리먼트와 after, before 엘리먼트는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;position: absolute;&lt;/code&gt;여야 한다.&lt;/h1&gt;
&lt;p&gt;위의 전제조건이 있어야 다음단계(위치지정)로 넘어갈 수 있다.&lt;br /&gt;
앞으로 사용할 코드이다.&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;----------html----------
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;parent&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;base&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
----------css-----------
#base { position: absolute;}
#base::before, #base::after {position: absolute;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;2-after-before-가상요소는-content속성이-지정되어야한다&quot;&gt;2. after, before 가상요소는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;content&lt;/code&gt;속성이 지정되어야한다.&lt;/h1&gt;
&lt;p&gt;1번과 마찬가지로 전제조건이다. 즉 after와 before에&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;content:&quot;&quot;&lt;/code&gt; 라도 명시해줘야한다.&lt;/p&gt;
</description>
				
				<pubDate>Fri, 26 Feb 2021 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/frontend/css-pseudo-element-positioning.html</link>
				<guid isPermaLink="true">http://localhost:4000/frontend/css-pseudo-element-positioning.html</guid>
			</item>
		
			<item>
				<title>ssh key 생성, port변경, 접속하기</title>
				
				
					<description>&lt;h2 id=&quot;ssh-개요&quot;&gt;ssh 개요&lt;/h2&gt;
&lt;p&gt;ssh는 ssh-server와 ssh-client간의 통신을 통해 client에서 server로 원격접속을 통해 server의 시스템 조작을 가능하게 해주는 도구이다.&lt;br /&gt;
공개키-비공기키 방식을 통해 간편하고 안전한 접속을 가능하게 해준다.&lt;/p&gt;
</description>
				
				<pubDate>Fri, 19 Feb 2021 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/tools/using-ssh.html</link>
				<guid isPermaLink="true">http://localhost:4000/tools/using-ssh.html</guid>
			</item>
		
	</channel>
</rss>
