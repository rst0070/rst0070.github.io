<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
	<channel>
		<title>Rst</title>
		<description></description>
		<link></link>
		<atom:link href="/rss-feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>이벤트 기반 비동기 방식이란? 어떻게 동작하는거지? Node.js Javascript</title>
				
				
					<description>&lt;h1 id=&quot;배경&quot;&gt;배경&lt;/h1&gt;
&lt;p&gt;Node.js를 처음 접했을때 &lt;em&gt;이벤트 기반 비동기 처리&lt;/em&gt; 방식을 
사용한다는 사실을 알게됐다. &lt;em&gt;모던 웹을 위한 Node.js 프로그래밍&lt;/em&gt; 
이라는 책에서는 이 방식을 아래의 &lt;em&gt;시장 대기표&lt;/em&gt; 예시로 
설명했다.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;시장 여러곳의 가게에서 물건을 구매해야한다.&lt;br /&gt;
이때 각 가게에는 손님들이 줄을 서서 대기하고 있다.&lt;br /&gt;
빠르게 모든 물건을 구매하기 위해선 두가지 방법이 있는데&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;몸을 복제해 동시에 여러가게에 간다.&lt;/li&gt;
  &lt;li&gt;시장을 대기표를 나누어주는 시스템으로 바꾸고 
대기표만 받고 기다린다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1번의 방식은 기존의 스레드 기반 네트워크 프로그램의 방식이며,&lt;br /&gt;
2번은 이벤트 기반 비동기 방식이다.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;이 예시를 통해서 이벤트 기반 비동기 방시기 어떤 
방식인지 이해할 순 있었다. 하지만 이것이 어떻게 가능한지, 
진짜 단일 스레드로 가능한건지 궁금해졌다.&lt;/p&gt;
</description>
				
				<pubDate>Fri, 07 Feb 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/nodejs-what-is-event-based-programming.html</link>
				<guid isPermaLink="true">http://localhost:4000/nodejs-what-is-event-based-programming.html</guid>
			</item>
		
			<item>
				<title>[Node.js] 전역 변수, 전역 객체 (console, process, exports)</title>
				
				
					<description>&lt;p&gt;이 글은 Node.js의 전역 변수와 전역 객체를
정리한 글 입니다.&lt;/p&gt;
</description>
				
				<pubDate>Mon, 03 Feb 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/nodejs-global-objects.html</link>
				<guid isPermaLink="true">http://localhost:4000/nodejs-global-objects.html</guid>
			</item>
		
			<item>
				<title>[Javascript] Callback 함수 with JQuery effect</title>
				
				
					<description>&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js&quot;&gt;&lt;/script&gt;

</description>
				
				<pubDate>Thu, 30 Jan 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/javascript-callback-with-jquery-effect.html</link>
				<guid isPermaLink="true">http://localhost:4000/javascript-callback-with-jquery-effect.html</guid>
			</item>
		
			<item>
				<title>[HTML5] Outline과 Section</title>
				
				
					<description>&lt;ul&gt;
  &lt;li&gt;이 글은 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTML/HTML5_%EB%AC%B8%EC%84%9C%EC%9D%98_%EC%84%B9%EC%85%98%EA%B3%BC_%EC%9C%A4%EA%B3%BD&quot;&gt;MDN문서&lt;/a&gt;와 &lt;a href=&quot;https://m5designstudio.com/2013/orlando-web-design/html5-for-beginners-2&quot;&gt;M5 design studio&lt;/a&gt;를 참고하여 작성한 글 입니다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gsnedders.html5.org/outliner/&quot;&gt;HTML5 Outliner&lt;/a&gt;을 이용하면 아웃라인을 확인할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;outline&quot;&gt;Outline&lt;/h1&gt;
&lt;p&gt;HTML5에서는 이전보다 파악하기 쉬운 아웃라인을 사용합니다. 
아웃라인은 ‘섹션의 계층구조(트리구조)’라고 이해할 수 있습니다.&lt;/p&gt;
</description>
				
				<pubDate>Sat, 18 Jan 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/html5-outlines-and-section.html</link>
				<guid isPermaLink="true">http://localhost:4000/html5-outlines-and-section.html</guid>
			</item>
		
			<item>
				<title>[Git] 2.Checkout</title>
				
				
					<description>
</description>
				
				<pubDate>Tue, 14 Jan 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/git/git-2-checkout.html</link>
				<guid isPermaLink="true">http://localhost:4000/git/git-2-checkout.html</guid>
			</item>
		
			<item>
				<title>[Git] 1.버전생성</title>
				
				
					<description>&lt;h2 id=&quot;버전관리&quot;&gt;버전관리&lt;/h2&gt;
&lt;p&gt;git은 버전관리를 제공하는 소프트웨어이며 ‘.git’폴더에서 변경사항을 관리한다.&lt;br /&gt;
아래의 용어들을 통해 git이 작동하는 방식을 알 수 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;repository: 버전이 저장되어있는곳(.git 폴더로 생각할 수 있다.)&lt;/li&gt;
  &lt;li&gt;working tree: 변경사항들이 버전으로 전환되기 전 단계&lt;/li&gt;
  &lt;li&gt;staging area: working tree에서 버전으로 저장할 파일들을 선택하여 올려놓는 공간.&lt;/li&gt;
&lt;/ul&gt;
</description>
				
				<pubDate>Tue, 14 Jan 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/git/git-1-create-version.html</link>
				<guid isPermaLink="true">http://localhost:4000/git/git-1-create-version.html</guid>
			</item>
		
	</channel>
</rss>
