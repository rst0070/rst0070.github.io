<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
	<channel>
		<title>Rst</title>
		<description></description>
		<link></link>
		<atom:link href="/rss-feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>CSS font 속기형 작성법</title>
				
				
					<description>
</description>
				
				<pubDate>Wed, 25 Mar 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/css-shorthand-font-set.html</link>
				<guid isPermaLink="true">http://localhost:4000/css-shorthand-font-set.html</guid>
			</item>
		
			<item>
				<title>CSS position: 기본위치, 상대위치, 절대위치, 고정위치</title>
				
				
					<description>&lt;p&gt;css의 &lt;code class=&quot;highlighter-rouge&quot;&gt;position&lt;/code&gt;속성에는 &lt;em&gt;static&lt;/em&gt;, &lt;em&gt;relative&lt;/em&gt;, &lt;em&gt;absolute&lt;/em&gt;, &lt;em&gt;fixed&lt;/em&gt;가 
있습니다.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;static&quot;&gt;static&lt;/h2&gt;
&lt;p&gt;static은 모든 요소에 기본적으로 설정된 값입니다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;relative&quot;&gt;relative&lt;/h2&gt;
&lt;p&gt;relative 속성은 두가지 특징이 있습니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;relative 속성을 가진 요소가 원래 있던 공간을 다른 요소가 침범하지 못한다.&lt;/li&gt;
  &lt;li&gt;relative 속성을 가진 요소가 자신의 원래 위치를 기준으로 움직인다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;예시&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.example&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 예시의 경우 &lt;em&gt;.example&lt;/em&gt;은 원래자신의 위치중 오른쪽 위 꼭짓점을 기준으로 
아래로 5px, 왼쪽으로 4px 이동합니다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;absolute&quot;&gt;absolute&lt;/h2&gt;
&lt;p&gt;절대위치로 설정된 절대요소는 다음과 같은 속성을 갖게 됩니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;static 위치설정이 아닌 부모요소중 가장 가까운 부모를 기준으로 위치를 설정한다.&lt;/li&gt;
  &lt;li&gt;절대요소 자신이 원래 위치해 있던 공간에 다른 요소가 침범할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;예시&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.example&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;fixed&quot;&gt;fixed&lt;/h2&gt;
&lt;p&gt;고정위치로 설정된 고정요소들은 다음과 같은 속성을 갖게 됩니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;고정요소 자신이 원래 위치하던 공간에 다른 요소가 침범할 수 있다.&lt;/li&gt;
  &lt;li&gt;웹브라우저 화변을 기준으로 위치를 이동하며, 스크롤해도 고정되어있다.&lt;/li&gt;
&lt;/ol&gt;
</description>
				
				<pubDate>Wed, 25 Mar 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/css-position-relative-absolute-fixed.html</link>
				<guid isPermaLink="true">http://localhost:4000/css-position-relative-absolute-fixed.html</guid>
			</item>
		
			<item>
				<title>[Error] DPI-1047 : node.js 와 oracle client의 호환문제</title>
				
				
					<description>&lt;h2 id=&quot;배경&quot;&gt;배경&lt;/h2&gt;
&lt;p&gt;node.js에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;oracledb&lt;/code&gt;모듈을 사용하는데 아래와 같은 오류가 발생했다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Error: DPI-1047: Cannot locate a 64-bit Oracle Client library:
&quot;D:\app\kwb07\product\11.2.0\dbhome_1\bin\oci.dll is not the correct architecture&quot;. 
See https://oracle.github.io/odpi/doc/installation.html#windows for help
Node-oracledb installation instructions: https://oracle.github.io/node-oracledb/INSTALL.html
You must have 64-bit Oracle client libraries in your PATH environment variable.
If you do not have Oracle Database on this computer, then install the Instant Client 
Basic or Basic Light package from
http://www.oracle.com/technetwork/topics/winx64soft-089540.html
A Microsoft Visual Studio Redistributable suitable for your Oracle client library 
version must be available.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;local 컴퓨터에 32bit 오라클이 설치되어있어 따로 Oracle Client 를 설치하지 않고 
64bit node.js를 사용하다 이와 같은 오류가 발생한것이다.&lt;/p&gt;

&lt;p&gt;해결방법은 간단하다.&lt;br /&gt;
&lt;em&gt;64bit Oracle Instant Client 를 다운받아 환경 변수 설정을 한다.&lt;/em&gt; 
만약 32bit가 필요하다면 32bit Instant Client를 받으면 된다.&lt;/p&gt;

&lt;h2 id=&quot;1-instant-client-다운받기&quot;&gt;1. Instant Client 다운받기&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.oracle.com/kr/database/technologies/instant-client/downloads.html&quot;&gt;Oracle에서 받는다.&lt;/a&gt; 
자신에게 해당되는 버전을 선택하고 &lt;em&gt;Basic Package&lt;/em&gt;와 &lt;em&gt;SDK Package&lt;/em&gt;를 받으면 된다.&lt;/p&gt;

&lt;p&gt;두 압축파일을 풀어 하나의 폴더로 합치면 끝.&lt;/p&gt;

&lt;h2 id=&quot;2-환경변수-설정&quot;&gt;2. 환경변수 설정&lt;/h2&gt;
&lt;p&gt;앞에서 합친 폴더를 시스템 환경변수의 &lt;em&gt;Path&lt;/em&gt; 변수에 추가한다.&lt;/p&gt;
</description>
				
				<pubDate>Sat, 29 Feb 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/err-node-oracle-bit-dif.html</link>
				<guid isPermaLink="true">http://localhost:4000/err-node-oracle-bit-dif.html</guid>
			</item>
		
			<item>
				<title>[Node.js] oracledb 모듈을 이용해 ORACLE 사용하기</title>
				
				
					<description>&lt;hr /&gt;
&lt;h2 id=&quot;1-oracledb-모듈-불러오기-oracledb-객체-생성&quot;&gt;1. &lt;a href=&quot;https://oracle.github.io/node-oracledb/doc/api.html#-3-oracledb-class&quot;&gt;Oracledb 모듈 불러오기: Oracledb 객체 생성&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oracledb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;oracledb&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 oracledb 모듈을 불러오면 &lt;code class=&quot;highlighter-rouge&quot;&gt;oracledb&lt;/code&gt;라는 변수에는 
oracledb 객체의 포인터가 저장된다. 즉 하나의 프로세스에서 여러개의 변수로 
oracledb 모듈을 불러와도 모두 같은 객체를 참조하는것이다.&lt;/p&gt;

&lt;h3 id=&quot;11-oracledb-객체는-무엇을-하는가&quot;&gt;1.1 oracledb 객체는 무엇을 하는가?&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Pool&lt;/em&gt; 객체와 &lt;em&gt;Connection&lt;/em&gt; 객체를 생성할 기반의 역할을 하고 
DB관련 작업시 사용할 많은 &lt;a href=&quot;https://oracle.github.io/node-oracledb/doc/api.html#-31-oracledb-constants&quot;&gt;상수들을 갖고있다.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pool&lt;/em&gt; 과 &lt;em&gt;Connection&lt;/em&gt; 객체는 DB와의 통신을 생성하고 관리하는 역할을 한다.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;2-pool-생성하기&quot;&gt;2. Pool 생성하기&lt;/h2&gt;

&lt;h3 id=&quot;21-pool의-개념&quot;&gt;2.1 Pool의 개념&lt;/h3&gt;
&lt;p&gt;문서에 따르면 각각의 Pool 객체는 &lt;em&gt;&lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/19/lnoci/session-and-connection-pooling.html#GUID-F9662FFB-EAEF-495C-96FC-49C6D1D9625C&quot;&gt;Oracle Call Interface Session Pool&lt;/a&gt;&lt;/em&gt; 라고 한다.&lt;br /&gt;
이 Pool객체는 DB에 연결하기 위한 속성들을 저장하고 있으며 연결을 유지시켜 놓고 관리한다.&lt;br /&gt;
이런 특성의 장점은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;여러개의 연결이 발생할때 중복 사용되는 데이터를 Pool이 처리해 준다.&lt;/li&gt;
  &lt;li&gt;새로운 연결을 만들때의 대기시간이나 자원낭비가 없다.(Pool객체가 DB와의 연결을 
유지하고 있다.)&lt;/li&gt;
&lt;/ul&gt;
</description>
				
				<pubDate>Thu, 27 Feb 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/nodejs-oracledb-how-to-connect.html</link>
				<guid isPermaLink="true">http://localhost:4000/nodejs-oracledb-how-to-connect.html</guid>
			</item>
		
			<item>
				<title>[Oracle] Table 생성과 제약조건 (선언적 무결성 제약조건 추가하기)</title>
				
				
					<description>&lt;p&gt;Oracle에서 Table을 생성하고 제약조건을 추가하는 방법을 공부했다. 
그 방법을 정리하려 포스팅을 하게 되었다.&lt;/p&gt;

&lt;h2 id=&quot;테이블-만들기-기본적인-형태&quot;&gt;테이블 만들기: 기본적인 형태&lt;/h2&gt;
</description>
				
				<pubDate>Thu, 20 Feb 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/oracle-create-table.html</link>
				<guid isPermaLink="true">http://localhost:4000/oracle-create-table.html</guid>
			</item>
		
			<item>
				<title>[Oracle] 스키마 생성, 권한부여, 수정, 삭제</title>
				
				
					<description>&lt;h2 id=&quot;사용자-생성하기-create-user&quot;&gt;사용자 생성하기: ‘create user’&lt;/h2&gt;
&lt;p&gt;oracle에서 사용자(스키마)를 생성하기 위해선 create user 
명령을 사용한다.&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;identified&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;사용자에게-권한-부여하기&quot;&gt;사용자에게 권한 부여하기&lt;/h2&gt;
&lt;p&gt;oracle에서 사용자에게 권한을 부여하기 위해선 &lt;code class=&quot;highlighter-rouge&quot;&gt;grant ... to ...&lt;/code&gt;
명령을 사용한다.&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;grant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;권한&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;권한&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
				
				<pubDate>Wed, 19 Feb 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/oracle-user-create-grant-alter.html</link>
				<guid isPermaLink="true">http://localhost:4000/oracle-user-create-grant-alter.html</guid>
			</item>
		
			<item>
				<title>이벤트 기반 비동기 방식이란? 어떻게 동작하는거지? Node.js Javascript</title>
				
				
					<description>&lt;h1 id=&quot;배경&quot;&gt;배경&lt;/h1&gt;
&lt;p&gt;Node.js를 처음 접했을때 &lt;em&gt;이벤트 기반 비동기 처리&lt;/em&gt; 방식을
사용한다는 사실을 알게됐다. &lt;em&gt;모던 웹을 위한 Node.js 프로그래밍&lt;/em&gt;
이라는 책에서는 이 방식을 아래의 &lt;em&gt;시장 대기표&lt;/em&gt; 예시로
설명했다.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;시장 여러곳의 가게에서 물건을 구매해야한다.&lt;br /&gt;
이때 각 가게에는 손님들이 줄을 서서 대기하고 있다.&lt;br /&gt;
빠르게 모든 물건을 구매하기 위해선 두가지 방법이 있는데&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;몸을 복제해 동시에 여러가게에 간다.&lt;/li&gt;
  &lt;li&gt;시장을 대기표를 나누어주는 시스템으로 바꾸고
대기표만 받고 기다린다.&lt;/li&gt;
&lt;/ol&gt;
</description>
				
				<pubDate>Fri, 07 Feb 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/nodejs-what-is-event-based-programming.html</link>
				<guid isPermaLink="true">http://localhost:4000/nodejs-what-is-event-based-programming.html</guid>
			</item>
		
			<item>
				<title>[Node.js] 전역 변수, 전역 객체 (console, process, exports)</title>
				
				
					<description>&lt;p&gt;이 글은 Node.js의 전역 변수와 전역 객체를
정리한 글 입니다.&lt;/p&gt;
</description>
				
				<pubDate>Mon, 03 Feb 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/nodejs-global-objects.html</link>
				<guid isPermaLink="true">http://localhost:4000/nodejs-global-objects.html</guid>
			</item>
		
			<item>
				<title>[Javascript] Callback 함수 with JQuery effect</title>
				
				
					<description>&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js&quot;&gt;&lt;/script&gt;

</description>
				
				<pubDate>Thu, 30 Jan 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/javascript-callback-with-jquery-effect.html</link>
				<guid isPermaLink="true">http://localhost:4000/javascript-callback-with-jquery-effect.html</guid>
			</item>
		
			<item>
				<title>[HTML5] Outline과 Section</title>
				
				
					<description>&lt;ul&gt;
  &lt;li&gt;이 글은 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTML/HTML5_%EB%AC%B8%EC%84%9C%EC%9D%98_%EC%84%B9%EC%85%98%EA%B3%BC_%EC%9C%A4%EA%B3%BD&quot;&gt;MDN문서&lt;/a&gt;와 &lt;a href=&quot;https://m5designstudio.com/2013/orlando-web-design/html5-for-beginners-2&quot;&gt;M5 design studio&lt;/a&gt;를 참고하여 작성한 글 입니다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gsnedders.html5.org/outliner/&quot;&gt;HTML5 Outliner&lt;/a&gt;을 이용하면 아웃라인을 확인할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;outline&quot;&gt;Outline&lt;/h1&gt;
&lt;p&gt;HTML5에서는 이전보다 파악하기 쉬운 아웃라인을 사용합니다. 
아웃라인은 ‘섹션의 계층구조(트리구조)’라고 이해할 수 있습니다.&lt;/p&gt;
</description>
				
				<pubDate>Sat, 18 Jan 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/html5-outlines-and-section.html</link>
				<guid isPermaLink="true">http://localhost:4000/html5-outlines-and-section.html</guid>
			</item>
		
	</channel>
</rss>
