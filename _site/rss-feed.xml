<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
	<channel>
		<title>Rst</title>
		<description></description>
		<link></link>
		<atom:link href="/rss-feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>HTML 위치 이동: 페이지 내의 특정 위치로 이동하기</title>
				
				
					<description>&lt;p&gt;HTML 문서의 특정 element로 이동하는 방법입니다.&lt;/p&gt;
</description>
				
				<pubDate>Mon, 17 Aug 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/html/html-move-to-specified-element.html</link>
				<guid isPermaLink="true">http://localhost:4000/html/html-move-to-specified-element.html</guid>
			</item>
		
			<item>
				<title>Kotlin Syntax about Functions</title>
				
				
					<description>&lt;ul&gt;
  &lt;li&gt;Default Parameter Values&lt;/li&gt;
&lt;/ul&gt;
</description>
				
				<pubDate>Wed, 22 Jul 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/kotlin/kotlin-syntax-functions.html</link>
				<guid isPermaLink="true">http://localhost:4000/kotlin/kotlin-syntax-functions.html</guid>
			</item>
		
			<item>
				<title>Kotlin syntax: Class</title>
				
				
					<description>
</description>
				
				<pubDate>Wed, 22 Jul 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/kotlin/kotlin-syntax-class.html</link>
				<guid isPermaLink="true">http://localhost:4000/kotlin/kotlin-syntax-class.html</guid>
			</item>
		
			<item>
				<title>Kotlin Basic Syntax</title>
				
				
					<description>&lt;ul&gt;
  &lt;li&gt;Default Parameter Valuese&lt;/li&gt;
&lt;/ul&gt;
</description>
				
				<pubDate>Wed, 22 Jul 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/kotlin/kotlin-syntax-basic.html</link>
				<guid isPermaLink="true">http://localhost:4000/kotlin/kotlin-syntax-basic.html</guid>
			</item>
		
			<item>
				<title>HDL기본, nand gate를 사용해 and, or, not gate 만들기</title>
				
				
					<description>&lt;h2 id=&quot;hdl-기본&quot;&gt;HDL 기본&lt;/h2&gt;
</description>
				
				<pubDate>Tue, 14 Apr 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/hdl-and-or-not-gate.html</link>
				<guid isPermaLink="true">http://localhost:4000/hdl-and-or-not-gate.html</guid>
			</item>
		
			<item>
				<title>CSS font 속성들과 속기형 작성법</title>
				
				
					<description>&lt;p&gt;CSS에서 font의 특성을 지정하는 속성들과 이를 빠르게 작성할 수 있는
속기형 작성법에 대해 정리하려 한다.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;css에서-글자-스타일을-지정하는-속성들&quot;&gt;CSS에서 글자 스타일을 지정하는 속성들&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;글꼴: font-family&lt;/li&gt;
  &lt;li&gt;크기: font-size&lt;/li&gt;
  &lt;li&gt;행간: line-height&lt;/li&gt;
  &lt;li&gt;기울기: font-style&lt;/li&gt;
  &lt;li&gt;두께: font-weight&lt;/li&gt;
  &lt;li&gt;음절 앞 글자 대문자: font-variant(영문 글꼴에만 적용)&lt;/li&gt;
&lt;/ul&gt;
</description>
				
				<pubDate>Wed, 25 Mar 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/css-shorthand-font-set.html</link>
				<guid isPermaLink="true">http://localhost:4000/css-shorthand-font-set.html</guid>
			</item>
		
			<item>
				<title>CSS position: 기본위치, 상대위치, 절대위치, 고정위치</title>
				
				
					<description>&lt;p&gt;css의 &lt;code class=&quot;highlighter-rouge&quot;&gt;position&lt;/code&gt;속성에는 &lt;em&gt;static&lt;/em&gt;, &lt;em&gt;relative&lt;/em&gt;, &lt;em&gt;absolute&lt;/em&gt;, &lt;em&gt;fixed&lt;/em&gt;가 
있습니다.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;static&quot;&gt;static&lt;/h2&gt;
&lt;p&gt;static은 모든 요소에 기본적으로 설정된 값입니다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;relative&quot;&gt;relative&lt;/h2&gt;
&lt;p&gt;relative 속성은 두가지 특징이 있습니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;relative 속성을 가진 요소가 원래 있던 공간을 다른 요소가 침범하지 못한다.&lt;/li&gt;
  &lt;li&gt;relative 속성을 가진 요소가 자신의 원래 위치를 기준으로 움직인다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;예시&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.example&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 예시의 경우 &lt;em&gt;.example&lt;/em&gt;은 원래자신의 위치중 오른쪽 위 꼭짓점을 기준으로 
아래로 5px, 왼쪽으로 4px 이동합니다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;absolute&quot;&gt;absolute&lt;/h2&gt;
&lt;p&gt;절대위치로 설정된 절대요소는 다음과 같은 속성을 갖게 됩니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;static 위치설정이 아닌 부모요소중 가장 가까운 부모를 기준으로 위치를 설정한다.&lt;/li&gt;
  &lt;li&gt;절대요소 자신이 원래 위치해 있던 공간에 다른 요소가 침범할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;예시&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.example&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;fixed&quot;&gt;fixed&lt;/h2&gt;
&lt;p&gt;고정위치로 설정된 고정요소들은 다음과 같은 속성을 갖게 됩니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;고정요소 자신이 원래 위치하던 공간에 다른 요소가 침범할 수 있다.&lt;/li&gt;
  &lt;li&gt;웹브라우저 화변을 기준으로 위치를 이동하며, 스크롤해도 고정되어있다.&lt;/li&gt;
&lt;/ol&gt;
</description>
				
				<pubDate>Wed, 25 Mar 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/css-position-relative-absolute-fixed.html</link>
				<guid isPermaLink="true">http://localhost:4000/css-position-relative-absolute-fixed.html</guid>
			</item>
		
			<item>
				<title>[Error] DPI-1047 : node.js 와 oracle client의 호환문제</title>
				
				
					<description>&lt;h2 id=&quot;배경&quot;&gt;배경&lt;/h2&gt;
&lt;p&gt;node.js에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;oracledb&lt;/code&gt;모듈을 사용하는데 아래와 같은 오류가 발생했습니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Error: DPI-1047: Cannot locate a 64-bit Oracle Client library:
&quot;D:\app\****\product\11.2.0\dbhome_1\bin\oci.dll is not the correct architecture&quot;. 
See https://oracle.github.io/odpi/doc/installation.html#windows for help
Node-oracledb installation instructions: https://oracle.github.io/node-oracledb/INSTALL.html
You must have 64-bit Oracle client libraries in your PATH environment variable.
If you do not have Oracle Database on this computer, then install the Instant Client 
Basic or Basic Light package from
http://www.oracle.com/technetwork/topics/winx64soft-089540.html
A Microsoft Visual Studio Redistributable suitable for your Oracle client library 
version must be available.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 메세지를 읽어보면 64bit Oracle client libraries를사용하라고 합니다.&lt;br /&gt;
저는 64bit node.js와 32bit Oracle DB를 사용하고 있었는데 둘의 호환에 문제가 생긴것입니다.&lt;/p&gt;
</description>
				
				<pubDate>Sat, 29 Feb 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/err-node-oracle-bit-dif.html</link>
				<guid isPermaLink="true">http://localhost:4000/err-node-oracle-bit-dif.html</guid>
			</item>
		
			<item>
				<title>[Node.js] oracledb 모듈을 이용해 ORACLE 사용하기</title>
				
				
					<description>&lt;hr /&gt;
&lt;h2 id=&quot;1-oracledb-모듈-불러오기-oracledb-객체-생성&quot;&gt;1. &lt;a href=&quot;https://oracle.github.io/node-oracledb/doc/api.html#-3-oracledb-class&quot;&gt;Oracledb 모듈 불러오기: Oracledb 객체 생성&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oracledb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;oracledb&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 oracledb 모듈을 불러오면 &lt;code class=&quot;highlighter-rouge&quot;&gt;oracledb&lt;/code&gt;라는 변수에는 
oracledb 객체의 포인터가 저장된다. 즉 하나의 프로세스에서 여러개의 변수로 
oracledb 모듈을 불러와도 모두 같은 객체를 참조하는것이다.&lt;/p&gt;

&lt;h3 id=&quot;11-oracledb-객체는-무엇을-하는가&quot;&gt;1.1 oracledb 객체는 무엇을 하는가?&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Pool&lt;/em&gt; 객체와 &lt;em&gt;Connection&lt;/em&gt; 객체를 생성할 기반의 역할을 하고 
DB관련 작업시 사용할 많은 &lt;a href=&quot;https://oracle.github.io/node-oracledb/doc/api.html#-31-oracledb-constants&quot;&gt;상수들을 갖고있다.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pool&lt;/em&gt; 과 &lt;em&gt;Connection&lt;/em&gt; 객체는 DB와의 통신을 생성하고 관리하는 역할을 한다.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;2-pool-생성하기&quot;&gt;2. Pool 생성하기&lt;/h2&gt;

&lt;h3 id=&quot;21-pool의-개념&quot;&gt;2.1 Pool의 개념&lt;/h3&gt;
&lt;p&gt;문서에 따르면 각각의 Pool 객체는 &lt;em&gt;&lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/19/lnoci/session-and-connection-pooling.html#GUID-F9662FFB-EAEF-495C-96FC-49C6D1D9625C&quot;&gt;Oracle Call Interface Session Pool&lt;/a&gt;&lt;/em&gt; 라고 한다.&lt;br /&gt;
이 Pool객체는 DB에 연결하기 위한 속성들을 저장하고 있으며 연결을 유지시켜 놓고 관리한다.&lt;br /&gt;
이런 특성의 장점은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;여러개의 연결이 발생할때 중복 사용되는 데이터를 Pool이 처리해 준다.&lt;/li&gt;
  &lt;li&gt;새로운 연결을 만들때의 대기시간이나 자원낭비가 없다.(Pool객체가 DB와의 연결을 
유지하고 있다.)&lt;/li&gt;
&lt;/ul&gt;
</description>
				
				<pubDate>Thu, 27 Feb 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/node_js/nodejs-oracledb-how-to-connect.html</link>
				<guid isPermaLink="true">http://localhost:4000/node_js/nodejs-oracledb-how-to-connect.html</guid>
			</item>
		
			<item>
				<title>[Oracle] Table 생성과 제약조건 (선언적 무결성 제약조건 추가하기)</title>
				
				
					<description>&lt;p&gt;Oracle에서 Table을 생성하고 제약조건을 추가하는 방법을 공부했다. 
그 방법을 정리하려 포스팅을 하게 되었다.&lt;/p&gt;

&lt;h2 id=&quot;테이블-만들기-기본적인-형태&quot;&gt;테이블 만들기: 기본적인 형태&lt;/h2&gt;
</description>
				
				<pubDate>Thu, 20 Feb 2020 00:00:00 +0900</pubDate>
				<link>http://localhost:4000/oracle/oracle-create-table.html</link>
				<guid isPermaLink="true">http://localhost:4000/oracle/oracle-create-table.html</guid>
			</item>
		
	</channel>
</rss>
