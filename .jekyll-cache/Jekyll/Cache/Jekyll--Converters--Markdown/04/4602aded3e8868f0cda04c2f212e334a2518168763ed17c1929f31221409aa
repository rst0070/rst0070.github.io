I"<p>이 글은 <a href="https://docs.spring.io/spring-security/reference/servlet/architecture.html">스프링 공식 문서</a>를 보고 작성했습니다.</p>

<p><strong>목차</strong></p>
<ol>
  <li>전체 구조</li>
  <li>필터와 필터체인</li>
  <li>DelegatingFilterProxy</li>
  <li>FilterChainProxy</li>
  <li>SecurityFilterChain</li>
  <li>Security Exception 처리 과정</li>
</ol>

<h2 id="1-전체-구조">1. 전체 구조</h2>
<hr />
<p><img src="/assets/img/post/Java/spring_security_architecture/multi-securityfilterchain.png" />
위 그림의 한 부분씩 살펴보자.</p>

<h2 id="2-필터와-필터체인">2. 필터와 필터체인</h2>
<p>서블릿 애플리케이션은 톰캣과 같은 서블릿 컨테이너 위에서 실행된다.<br />
client의 요청이 발생했을때 컨테이너의 작동방식은 다음과 같다.</p>
<ol>
  <li>client의 요청을 받고 요청의 uri를 통해 어떤 application에 요청을 전달해야하는지 확인한다.</li>
  <li>컨테이너는 해당 app의 필터와 서블릿을 묶어 <code class="language-plaintext highlighter-rouge">FilterChain</code>을 구성하여 <code class="language-plaintext highlighter-rouge">ServletRequest</code>와 <code class="language-plaintext highlighter-rouge">ServletResponse</code>를 전달한다. 이때 서블릿은 모든 필터를 통해 요청이 필터링 되고 나서 요청을 전달받는다.</li>
</ol>

<p>이때 필터의 특징은 다음과 같다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">request</code>와 <code class="language-plaintext highlighter-rouge">response</code>, <code class="language-plaintext highlighter-rouge">FilterChain</code> 객체를 전달받는다. -&gt; 요청에 관련된 작업후 FilterChain을 통해 다음 필터에 <code class="language-plaintext highlighter-rouge">request</code>, <code class="language-plaintext highlighter-rouge">response</code>넘겨줌.</li>
  <li>필터간에는 순서가 있다.</li>
</ul>

<h2 id="3-delegatingfilterproxy">3. DelegatingFilterProxy</h2>
:ET