I"=<h2 id="문제의-요구사항">문제의 요구사항</h2>
<ul>
  <li><a href="https://www.acmicpc.net/problem/2842">문제 링크</a><br />
P에서 출발해서 모든 K를 방문하고 P로 돌아오는 방법중 가장 적은 피로도로 움직이는 방법을 구하는 문제이다.<br />
이때 주의할점이 있다.
    <ol>
      <li>모든 K를 방문하는것만 구현하면 된다. 같은 길로 돌아가면 되기 때문</li>
      <li>부분 문제의 최적이 전체문제의 최적이 아니다.</li>
    </ol>
  </li>
</ul>

<p>주의할 점 2번을 깨닫는게 좀 어려웠던것 같다.<br />
한상덕의 피로도는 전체 경로중에 가장 높은 고도와 가장 낮은 고도의 차이이며 이를 최소화하는것이 이 문제의 목표이다.</p>

<p>즉, DFS로 한상덕의 마을을 탐색한다고 했을때, 부분적인 경로에서 피로도를 최소화하는것으로는 문제해결이 불가능하다는 것 이다.</p>

<p>따라서 전체 경로에 대한 가장 낮은고도와 가장 높은 고도를 설정해 놓고, 
이 고도사이에서 모든 집을 방문할 수 있는가를 확인하는것이 풀이방법이 될 것 이다.</p>

<h2 id="대략적인-방법">대략적인 방법</h2>
<p><strong>1. 전체 경로의 고도 특정하기</strong><br />
입력을 통해 마을의 모든 부분의 고도를 확인할 수 있는데 이를 중복을 제거하고 오름차순으로 정렬한다.<br />
이 정렬된 고도값들에 두개의 포인터(<code class="language-plaintext highlighter-rouge">left</code>, <code class="language-plaintext highlighter-rouge">right</code> 등)를 사용하여 고도값을 조정한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span><span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span> <span class="o">&amp;&amp;</span> <span class="n">right</span> <span class="o">&lt;</span> <span class="n">고도값개수</span><span class="o">){</span>
    <span class="o">...</span><span class="c1">//left와 right이용해 최대, 최소 고도를 우체국에서 출발하는 dfs에 전달하기</span>
    <span class="k">if</span><span class="o">(</span><span class="n">dfs결과방문한집개수</span> <span class="o">==</span> <span class="n">전체집개수</span><span class="o">){</span>
        <span class="n">right</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">result</span><span class="o">,</span> <span class="n">altitute</span><span class="o">[</span><span class="n">right</span><span class="o">]</span> <span class="o">-</span> <span class="n">altitute</span><span class="o">[</span><span class="n">left</span><span class="o">]);</span>
        <span class="n">left</span><span class="o">++;</span>
    <span class="o">}</span><span class="k">else</span> <span class="n">right</span><span class="o">++;</span>
<span class="o">}</span>
</code></pre></div></div>
<p><strong>2. DFS 구현하기</strong><br />
DFS메서드의 인자는 <code class="language-plaintext highlighter-rouge">최대고도</code>, <code class="language-plaintext highlighter-rouge">최소고도</code>, <code class="language-plaintext highlighter-rouge">현재위치</code>를 가지도록 했고, 
리턴값은 해당 부분경로에서 방문한 집의 개수로 했다.
```java
int dfs(int low, int high, int h, int w){
    //1. 기저조건(이미 방문했거나 지도의 범위를 벗어난경우 0리턴)</p>
:ET