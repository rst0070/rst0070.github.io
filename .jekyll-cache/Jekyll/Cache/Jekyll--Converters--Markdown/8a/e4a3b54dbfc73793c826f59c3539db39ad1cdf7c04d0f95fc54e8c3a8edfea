I"U3<p><a href="https://www.acmicpc.net/problem/13262">문제링크</a></p>

<p>n길이의 수열을 k개의 그룹으로 나누고 각 그룹의 원소들을 or한 값을 모두 더한 값의 최대를 구하는문제.<br />
어떻게 그룹을 나누어야하는지 계산해야한다.<br />
이 상황을 dp로 표현할 수 있으며 아래처럼 opt를 구하는 문제로 변형시킬 수 있다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dp[k][n]
--&gt; n번째 원소까지 k개의 그룹으로 묶었을때 수열의 or점수의 최댓값.
cost[i][j]
--&gt; i번째 부터 j번째까지 or한 값(하나의 그룹으로 묶었을때 그룹의 or)

dp[k][n] = dp[k-1][opt] + cost[opt+1][n]
--&gt; (opt까지의 원소를 k-1로 묶은 최대 점수) + (opt+1부터 n까지 원소의 or값)
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">dp[k][n]</code>을 최대로 만드는 opt를 <code class="language-plaintext highlighter-rouge">opt(k, n)</code>이라 하고 a가 양의 정수일때, 
<code class="language-plaintext highlighter-rouge">opt(k, n) &lt;= opt(k, n + a)</code>가 만족된다.<br />
따라서 동적계획법을 분할정복으로 최적화 시킬 수 있다.</p>

<h2 id="코드">코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">수열의_OR_점수</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="no">N</span><span class="o">,</span> <span class="no">K</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">long</span><span class="o">[]</span> <span class="n">seq</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">long</span><span class="o">[</span><span class="mi">5001</span><span class="o">];</span>
    <span class="kd">static</span> <span class="kt">long</span><span class="o">[][]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">long</span><span class="o">[</span><span class="mi">5001</span><span class="o">][</span><span class="mi">5001</span><span class="o">];</span><span class="c1">//dp[k][n] : n번째 까지 k개의 그룹으로 나눴을때 점수의 최댓값</span>
    <span class="kd">static</span> <span class="kt">long</span><span class="o">[][]</span> <span class="n">cost</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">long</span><span class="o">[</span><span class="mi">5001</span><span class="o">][</span><span class="mi">5001</span><span class="o">];</span><span class="c1">//cost[i][j] : i번째 부터 j번째 까지 그룹으로 묶었을때 or점수</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        
        <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
            <span class="n">seq</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        
        <span class="n">fillCost</span><span class="o">();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
            <span class="n">dp</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">cost</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="n">i</span><span class="o">];</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="no">N</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span>
            <span class="n">dncOpt</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">k</span><span class="o">,</span> <span class="no">N</span><span class="o">,</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="no">N</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="no">K</span><span class="o">][</span><span class="no">N</span><span class="o">]);</span>
    <span class="o">}</span>

    <span class="c1">//n이 최대 5000이기 때문에 시간복잡도 괜찮음</span>
    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">fillCost</span><span class="o">(){</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
            <span class="n">cost</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">seq</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="no">N</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="n">cost</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">cost</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">|</span> <span class="n">seq</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dncOpt</span><span class="o">(</span><span class="kt">int</span> <span class="n">lev</span><span class="o">,</span> <span class="kt">int</span> <span class="n">nLeft</span><span class="o">,</span> <span class="kt">int</span> <span class="n">nRight</span><span class="o">,</span> <span class="kt">int</span> <span class="n">optLeft</span><span class="o">,</span> <span class="kt">int</span> <span class="n">optRight</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">nLeft</span> <span class="o">&gt;</span> <span class="n">nRight</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">nLeft</span> <span class="o">+</span> <span class="n">nRight</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">opt</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">o</span> <span class="o">=</span> <span class="n">optLeft</span><span class="o">;</span> <span class="n">o</span> <span class="o">&lt;=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">optRight</span><span class="o">,</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span> <span class="n">o</span><span class="o">++){</span>
            <span class="kt">long</span> <span class="n">val</span> <span class="o">=</span> <span class="n">dp</span><span class="o">[</span><span class="n">lev</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">o</span><span class="o">]</span> <span class="o">+</span> <span class="n">cost</span><span class="o">[</span><span class="n">o</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">mid</span><span class="o">];</span>
            <span class="k">if</span><span class="o">(</span><span class="n">opt</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span> <span class="n">val</span> <span class="o">&gt;</span> <span class="n">dp</span><span class="o">[</span><span class="n">lev</span><span class="o">][</span><span class="n">mid</span><span class="o">]){</span>
                <span class="n">opt</span> <span class="o">=</span> <span class="n">o</span><span class="o">;</span>
                <span class="n">dp</span><span class="o">[</span><span class="n">lev</span><span class="o">][</span><span class="n">mid</span><span class="o">]</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">dncOpt</span><span class="o">(</span><span class="n">lev</span><span class="o">,</span> <span class="n">nLeft</span><span class="o">,</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">optLeft</span><span class="o">,</span> <span class="n">opt</span><span class="o">);</span>
        <span class="n">dncOpt</span><span class="o">(</span><span class="n">lev</span><span class="o">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">nRight</span><span class="o">,</span> <span class="n">opt</span><span class="o">,</span> <span class="n">optRight</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>
:ET