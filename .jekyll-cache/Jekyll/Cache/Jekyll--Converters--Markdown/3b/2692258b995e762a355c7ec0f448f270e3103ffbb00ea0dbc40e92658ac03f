I"<h1 id="배경">배경</h1>
<p>Node.js를 처음 접했을때 <em>이벤트 기반 비동기 처리</em> 방식을 
사용한다는 사실을 알게됐다. <em>모던 웹을 위한 Node.js 프로그래밍</em> 
이라는 책에서는 이 방식을 아래의 <em>시장 대기표</em> 예시로 
설명했다.</p>
<hr />
<p>시장 여러곳의 가게에서 물건을 구매해야한다.<br />
이때 각 가게에는 손님들이 줄을 서서 대기하고 있다.<br />
빠르게 모든 물건을 구매하기 위해선 두가지 방법이 있는데</p>
<ol>
  <li>몸을 복제해 동시에 여러가게에 간다.</li>
  <li>시장을 대기표를 나누어주는 시스템으로 바꾸고 
대기표만 받고 기다린다.</li>
</ol>

<p>1번의 방식은 기존의 스레드 기반 네트워크 프로그램의 방식이며,<br />
2번은 이벤트 기반 비동기 방식이다.</p>
<hr />
<p>이 예시를 통해서 이벤트 기반 비동기 방시기 어떤 
방식인지 이해할 순 있었다. 하지만 이것이 어떻게 가능한지, 
진짜 단일 스레드로 가능한건지 궁금해졌다.</p>

<h1 id="multi-thread-방식">Multi Thread 방식</h1>
<p>Multi Thread 방식의 서버의 요청처리는 각 요청마다 
새로운 Thread를 발생시켜 처리하는 방식이다. 
아래의 java코드로 이해해 볼 수 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//server-socket 80번 포트에서 bind</span>
<span class="nc">ServerSocket</span> <span class="n">ss</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ServerSocket</span><span class="o">(</span><span class="mi">80</span><span class="o">);</span>
<span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">//연결 생성</span>
  <span class="nc">Socket</span> <span class="n">s</span> <span class="o">=</span> <span class="n">ss</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span>
  <span class="c1">//새로운 스레드 발생시켜 처리과정 넘기기</span>
  <span class="nc">MutiThreadHttp</span> <span class="n">mt</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MutiThreadHttp</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
  <span class="c1">//스레드 시작             </span>
  <span class="n">mt</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<p>이 방식은 클라이언트 요청이 몰릴수록 메모리 자원을 
많이 소모하게 되며 서버의 자원에 제한을 받을 수 있다.<br />
또 프로그래밍시 Thread간 공유자원 관리에 주의 해야하는 
단점이 있다.</p>

<h1 id="이벤트-기반-비동기-방식">이벤트 기반 비동기 방식</h1>
<p>Node.js를 포함한 javascript는 이벤트 기반 비동기 방식으로 
작동한다.</p>
<ul>
  <li><a href="https://hackernoon.com/understanding-js-the-event-loop-959beae3ac40">Understanding JS: The Event Loop</a><br />
아래의 내용은 위 링크의 자료를 통해 알게된 사실이다.</li>
</ul>

<h2 id="call-stack">Call Stack</h2>

:ET