I"=3<p><a href="https://www.acmicpc.net/problem/1916">문제링크</a><br />
이 문제에서는 N개의 정점과 M개의 음이아닌 가중치를 가지는 간선을 준다. 
이때 특정 정점사이로 이동하는 최소 가중치의 합을 구해야한다.</p>

<h2 id="소스코드">소스코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">최소비용_구하기</span><span class="o">{</span>

    <span class="c1">//https://www.acmicpc.net/problem/1916</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>

        <span class="c1">//정점의 개수</span>
        <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="n">graph</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="nc">Edge</span><span class="o">&gt;();</span>

        <span class="c1">//간선의 개수</span>
        <span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="k">while</span><span class="o">(</span><span class="no">M</span><span class="o">--</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">){</span>
            <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span><span class="c1">//출발정점</span>
            <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span><span class="c1">//도작정점</span>
            <span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span><span class="c1">//가중치</span>
            <span class="n">graph</span><span class="o">[</span><span class="n">a</span><span class="o">].</span><span class="na">add</span><span class="o">(</span> <span class="k">new</span> <span class="nc">Edge</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="n">w</span><span class="o">)</span> <span class="o">);</span>
        <span class="o">}</span>

        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>    <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span><span class="c1">//시작 정점</span>
        <span class="kt">int</span> <span class="n">end</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span><span class="c1">// 도착 정점</span>

        <span class="c1">//우선순위 큐(현재 존재하는 최소비용의 이동을 뽑아낸다.)</span>
        <span class="nc">PriorityQueue</span><span class="o">&lt;</span><span class="nc">Edge</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PriorityQueue</span><span class="o">&lt;</span><span class="nc">Edge</span><span class="o">&gt;(</span>
            <span class="o">(</span><span class="nc">Edge</span> <span class="n">e1</span><span class="o">,</span> <span class="nc">Edge</span> <span class="n">e2</span><span class="o">)-&gt;{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">e1</span><span class="o">.</span><span class="na">w</span> <span class="o">&lt;</span> <span class="n">e2</span><span class="o">.</span><span class="na">w</span><span class="o">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
                <span class="k">if</span><span class="o">(</span><span class="n">e1</span><span class="o">.</span><span class="na">w</span> <span class="o">==</span> <span class="n">e2</span><span class="o">.</span><span class="na">w</span><span class="o">)</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
                <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
            <span class="o">});</span>
        
        <span class="c1">//시작점을 넣는다(시작점에서부터 탐색)</span>
        <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Edge</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="mi">0</span><span class="o">));</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
            <span class="nc">Edge</span> <span class="n">now</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
            <span class="k">if</span><span class="o">(</span><span class="n">now</span><span class="o">.</span><span class="na">w</span> <span class="o">&gt;</span> <span class="n">distance</span><span class="o">[</span><span class="n">now</span><span class="o">.</span><span class="na">n</span><span class="o">])</span> <span class="k">continue</span><span class="o">;</span> <span class="c1">//이미 탐색된 최소비용이 더 작을땐 더이상 탐색하지 않는다.</span>

            <span class="c1">//그래프에서 연결된 다음 정점들 방문하기</span>
            <span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">Edge</span><span class="o">&gt;</span> <span class="n">nextNodes</span> <span class="o">=</span> <span class="n">graph</span><span class="o">[</span><span class="n">now</span><span class="o">.</span><span class="na">n</span><span class="o">].</span><span class="na">iterator</span><span class="o">();</span>
            <span class="k">while</span><span class="o">(</span><span class="n">nextNodes</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()){</span>
                <span class="nc">Edge</span> <span class="n">next</span> <span class="o">=</span> <span class="n">nextNodes</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
                <span class="n">next</span><span class="o">.</span><span class="na">w</span> <span class="o">+=</span> <span class="n">now</span><span class="o">.</span><span class="na">w</span><span class="o">;</span>
                <span class="k">if</span><span class="o">(</span><span class="n">next</span><span class="o">.</span><span class="na">w</span> <span class="o">&gt;=</span> <span class="n">distance</span><span class="o">[</span><span class="n">next</span><span class="o">.</span><span class="na">n</span><span class="o">])</span> <span class="k">continue</span><span class="o">;</span>

                <span class="n">distance</span><span class="o">[</span><span class="n">next</span><span class="o">.</span><span class="na">n</span><span class="o">]</span> <span class="o">=</span> <span class="n">next</span><span class="o">.</span><span class="na">w</span><span class="o">;</span>
                <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">next</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">distance</span><span class="o">[</span><span class="n">end</span><span class="o">]);</span>

    <span class="o">}</span>

    <span class="kd">static</span> <span class="kt">int</span> <span class="no">N</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="no">INF</span><span class="o">;</span>
    <span class="kd">static</span> <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="nc">Edge</span><span class="o">&gt;[]</span> <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">[</span><span class="mi">1001</span><span class="o">];</span>
    <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">distance</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">1001</span><span class="o">];</span>
    <span class="kd">static</span><span class="o">{</span>
        <span class="no">INF</span> <span class="o">=</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">100000</span><span class="o">;</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">distance</span><span class="o">,</span> <span class="no">INF</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Edge</span><span class="o">{</span>
        <span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="n">w</span><span class="o">;</span>
        <span class="nc">Edge</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">w</span><span class="o">){</span><span class="k">this</span><span class="o">.</span><span class="na">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span> <span class="k">this</span><span class="o">.</span><span class="na">w</span> <span class="o">=</span> <span class="n">w</span><span class="o">;}</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>
:ET